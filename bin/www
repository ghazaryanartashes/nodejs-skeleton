#!/usr/bin/env node
const mongoose = require('mongoose');

/**
 * Module dependencies.
 */

const app =
  process.env.NODE_ENV === 'production'
    ? require('../build')
    : require('../src');
const debug = require('debug')('server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

mongoose.connection.on('open', function() {
  const server = http.createServer(app);

  function onListening() {
    const addr = server.address();
    const bind =
      typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

  const s = server.listen(port);
  // const io = require('../src/socket').init(s);
  // io.on('connection', socket => {
  //   console.log('Client connected');
  //   socket.on('message', function(msg){
  //     io.emit('message', msg);
  //   });
  // });
  // server.on('error', onError);
  // server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
